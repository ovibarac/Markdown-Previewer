
//Redux:

//placeholder text
const defaultState={
  markdown: `# Welcome to my React Markdown Previewer!

## This is a sub-heading...
### And here's some other cool stuff:

Heres some code, \`<div></div>\`, between 2 backticks.

\`\`\`
// this is multi-line code:

function anotherExample(firstLine, lastLine) {
  if (firstLine == '\`\`\`' && lastLine == '\`\`\`') {
    return multiLineCode;
  }
}
\`\`\`

You can also make text **bold**... whoa!
Or _italic_.
Or... wait for it... **_both!_**
And feel free to go crazy ~~crossing stuff out~~.

There's also [links](https://www.freecodecamp.org), and
> Block Quotes!

And if you want to get really crazy, even tables:

Wild Header | Crazy Header | Another Header?
------------ | ------------- | -------------
Your content can | be here, and it | can be here....
And here. | Okay. | I think we get it.

- And of course there are lists.
  - Some are bulleted.
     - With different indentation levels.
        - That look like this.


1. And there are numbered lists too.
1. Use just 1s if you want!
1. And last but not least, let's not forget embedded images:

![cat](https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/cute-cat-photos-1593441022.jpg?crop=0.669xw:1.00xh;0.166xw,0&resize=640:*)`
}

//action consts
const CHANGE = 'CHANGE';

//actions:
const changeMarkdown = (newText)=>{
  return{
    type: CHANGE,
    text: newText
  }
}

const reducer = (state=defaultState, action)=>{
  switch(action.type){
    case CHANGE:
      return{
        markdown: action.text
      };
    default: 
      return state;
  }
}

const store = Redux.createStore(reducer);

//React:

class App extends React.Component{
  constructor(props){
    super(props);
    this.handleTextChange = this.handleTextChange.bind(this);
  }
  
  componentDidMount(){
    //jQuery / Bootstrap
    $("#wrapper").addClass("col-md-8 container-fluid");
  }
  
  handleTextChange(e){
    this.props.textChangedDispatch(e.target.value);
  }
  
  render(){
    
    return(
      <div id="wrapper">
        <div className="row">
          <div className="col-md-6">
            <Editor markdownProps={this.props.markdownProps} onChange={this.handleTextChange}/>
          </div>
          <div className="col-md-6">
            <div className="textBox">
              <h1 className="title">Previewer</h1>
              <Previewer markdownProps={this.props.markdownProps}/>
            </div>
          </div>
        </div>
      </div>
    )
  }
}

class Editor extends React.Component{
  constructor(props){
    super(props);
  }
  
  render(){
    
    return(
      <div className="textBox">
        <h1 className="title">Editor</h1>
        <textarea  id="editor" onChange={this.props.onChange} value={this.props.markdownProps}/>
      </div>
    )
  }
}

const renderer = new marked.Renderer();
renderer.link = function (href, title, text) {
  return `<a target="_blank" href="${href}">${text}</a>`;
};

class Previewer extends React.Component{
  constructor(props){
    super(props);
  }
  
  render(){
    
    return(
      <div
      dangerouslySetInnerHTML={{
        __html: marked(this.props.markdownProps, { renderer: renderer })
      }}
      id="preview"
    />
    )
  }
}

//React-Redux:
const Provider = ReactRedux.Provider;
const connect = ReactRedux.connect;

const mapStateToProps = (state)=>{
  return{
    markdownProps: state.markdown
  }
}

const mapDispatchToProps = (dispatch)=>{
  return{
    textChangedDispatch: (newText)=>{
      dispatch(changeMarkdown(newText))
    }
  }
}

const ReactReduxContainer = connect(mapStateToProps, mapDispatchToProps)(App)

class AppWrapper extends React.Component{
  render(){
      return(
        <Provider store={store}>
          <ReactReduxContainer/>
        </Provider>
      )
  }

}

ReactDOM.render(<AppWrapper />, document.getElementById('app'));
